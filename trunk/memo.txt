なんとなく近いものに対する雑感
・TCP/IP
→ コネクション切れるし、IP変わったら通信できんし、NATの中に居るノードには接続できん可能性が高いやん
・UDP/IP
→ IP変わったら通信できんし、パケット消えるやん
・SCTP
→ 流行ってないやん。あとNAT通れるの？これ
・SIP
→ 専用の中継ノードが必須やん。あと電話でんわしすぎてて大げさでない？
・RTSP
→ 動画転送専用にしか見えないなぁと思ってそれ以上見てません。これP2Pっぽく動けるの？
・SCTP over UDP
→ かなり正解に近そうな予感だけれど必要ない機能(マルチホームとか死んじゃう)があるよねぇ
・HTTP
→ NAT越えのサービスを記述できれば、実はこれが正解な気もしないでもない

ということで、NAT越えをできる中継ノードをHTTP的に作ればいいんでね？という気がしてきた


とりあえずユーザから見たときの class定義 を考える。
とっぷだうんだ！

#include <string>
#include <list>

namespace NC{
class NiftyConnector;

// ノード+サービス を識別子として用いるためのタグ
typedef std::string Tag;
typedef std::list<Tag> TagList;

// 検索の結果得られる「コネクション」
class Connection {
  friend NiftyConnector;
public:
  
private:
  
};


// タグを検索するための検索式
class Target {
  friend NiftyConnector;
public:
  // 複数見つかった場合の対応
  typedef enum {
    SELECT_FIRST, //< 見つけたもののうち最初にあたるものに固定する。相手が居なくなったら次の相手へと再送する
    SELECT_ROLL,  //< 一回の呼び出しごとに別のノードを選択する
    SELECT_FAIL,  //< 一個しか見つからなかった場合以外は見つからなかったものとして扱う
  } IfDuplicated;
  Service(std::string &searchString, const IfDuplicated duplicated = IfDuplicated::SELECT_FIRST);

private:
  std::string m_SearchString;
  
  ConnectionInfo &GetConnectionInfo();
}

// 送信時に使われるデータブロック
class SendDataBlock {
  friend NiftyConnector;
public:
  SendDataBlock(allocator == NULL);
  ~SendDataBlock();

  const bool Write[Ui|I]nt[8|16|32|64](value);
  const bool WriteBinary(data);
  const bool Commit();
}; // class SendDataBlock

// 受信時にユーザに渡されるデータブロック
class RecivedDataBlock {
  friend NiftyConnector;
public:
  RecivedDataBlock(allocator == NULL);
  ~RecivedDataBlock();

  const bool Read[Ui|I]nt[8|16|32|64](value);
  const bool ReadBinary(data, size);
}; // class RecivedDataBlock

// ユーザが作る一つの NCEndpoint class
class NiftyConnector {
public:
  class EventHandler {
  public:
    virtual ~EventHandler();
    virtual void recvEvent(calledNodeTag, calledServiceTag, data);
    virtual void sendFinishEvent(hint);
    virtual void sendRecivedEvent(hint);
    virtual void sendFailedEvent(hint);
  }; // class EventHandler

  NiftyConnector(Tag &tag, allocator == NULL);
  NiftyConnector(TagList &tags, allocator == NULL);
  void SetEventHandler(recvEventHandler);
  void IOUpdate();
  const bool Send(Target &reciver, data, sendFinishEventHandler, hint);
  const SendBuffer *CreateDataBlock();
}; // class NiftyConnector
}; // namespace NC

